<?php
/**
 * @file
 * Etherpad lite integration for Drupal.
 *
 * Main concept: Etherpad as a field.
 */

/**
 * Implements hook_menu().
 */
function etherpad_lite_menu() {
  $items = array();

  $items['admin/config/services/etherpad-lite'] = array(
    'title' => 'Etherpad lite',
    'description' => 'Configure Etherpad lite.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('etherpad_lite_admin_settings'),
    'access arguments' => array('administer site configuration'),
  );

  return $items;
}

/**
 * Etherpad lite settings form.
 */
function etherpad_lite_admin_settings() {
  $form = array();

  $form['etherpad_lite_apikey'] = array(
    '#type' => 'textfield',
    '#title' => 'Etherpad API Key',
    '#default_value' => variable_get('etherpad_lite_apikey'),
    '#required' => TRUE,
    '#description' => 'Search for APIKEY.txt in your Etherpad Lite installation.',
  );

  $form['etherpad_lite_url'] = array(
    '#type' => 'textfield',
    '#title' => 'Etherpad URL',
    '#default_value' => variable_get('etherpad_lite_url', 'http://localhost:9001'),
    '#required' => TRUE,
    '#description' => 'URL to your Etherpad Lite installation. Without trailing slash. e.g. http://localhost:9001',
  );

  $form['etherpad_lite_cookie_domain'] = array(
    '#type' => 'textfield',
    '#title' => 'Cookie domain',
    '#default_value' => variable_get('etherpad_lite_cookie_domain', 'localhost'),
    '#required' => TRUE,
    '#description' => 'Cookie Domain for your Etherpad. Must be writable for Drupal. <strong>Without protocoll.</strong> e.g. localhost',
  );

  $form['etherpad_lite_session_timeout'] = array(
    '#type' => 'textfield',
    '#title' => 'Session timeout',
    '#default_value' => variable_get('etherpad_lite_session_timeout', 60 * 60),
    '#required' => TRUE,
    '#description' => 'Session timeout in seconds. Used in the cookie.',
  );

  $form = system_settings_form($form);

  // Clear all caches to rebuild wsclient definitions.
  $form['#submit'][] = 'drupal_flush_all_caches';
  return $form;
}

/**
 * Implements hook_field_info().
 */
function etherpad_lite_field_info() {
  return array(
    'etherpad' => array(
      'label' => t('Etherpad'),
      'description' => t('This field stores varchar text in the database.'),
      'instance_settings' => array(
        'type' => 0,
        'text_processing' => 1,
      ),
      'default_widget' => 'etherpad_writer',
      'default_formatter' => 'etherpad_iframe',
    ),
  );
}

/**
 * Implements hook_field_widget_info().
 */
function etherpad_lite_field_widget_info() {
  return array(
    'etherpad_writer' => array(
      'label' => t('Etherpad'),
      'field types' => array('etherpad'),
      'settings' => array('size' => 60),
      'behaviors' => array(
        'multiple values' => FIELD_BEHAVIOR_DEFAULT,
        'default value' => FIELD_BEHAVIOR_DEFAULT,
      ),
    ),
  );
}

/**
 * Implements hook_field_settings_form().
 */
function etherpad_lite_field_settings_form($field, $instance, $has_data) {
  $settings = $field['settings'];
  $form['type'] = array(
    '#type' => 'select',
    '#title' => 'Pad type',
    '#required' => TRUE,
    '#options' => array(
      '0' => t('Public, everyone can view and edit.'),
      '1' => t('Group pad, granted users can view and edit.'),
    ),
    '#default_value' => isset($settings['type']) ? $settings['type'] : 0,
  );
  return $form;
}

/**
 * Implements hook_field_widget_form().
 */
function etherpad_lite_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element) {
  $value = isset($items[$delta]['pid']) ? $items[$delta]['pid'] : NULL;
  $element['#delta'] = $delta;

  $access = array(
    'field' => $field,
    'entity_type' => $element['#entity_type'],
  );
  if (isset($element['#bundle'])) {
    $access['bundle'] = $element['#bundle'];
  }

  if (isset($init) && $init == TRUE) {
    $access += array(
      'entity_op' => 'create',
      'op' => 'create',
    );
  }

  switch ($instance['widget']['type']) {
    case 'etherpad_writer':
      $element['pid'] = array(
        '#type' => 'hidden',
        '#default_value' => $value,
      );
      $element['access'] = array(
        '#type' => 'value',
        '#value' => $access,
      );
      $element['#after_build'][] = 'etherpad_lite_render_iframe';
      break;
  }

  return $element;
}

/**
 * Render etherpad lite iframe.
 *
 * @param array $element
 *   Form API element to process.
 *
 * @return array
 *   Form API element
 */
function etherpad_lite_render_iframe(array $element) {
  $pid = $element['pid']['#value'];
  $access = $element['access']['#value'];
  $field = $element['access']['#value']['field'];

  // If the etherpad side of things is not configured yet trying to use it will
  // cause the site to die. The web service is already raising an exception. We
  // need to handle that ourselves too.
  try {
    if ($pid == NULL) {
      // Create a group pad.
      if ($field['settings']['type'] == 1) {
        $result = etherpad_lite_client()->createGroup();
        if (!empty($result['data']['groupID'])) {
          $gid = $result['data']['groupID'];
        }
        $result = etherpad_lite_client()->createGroupPad('', uniqid('', TRUE), $gid);
        if (!empty($result['data']['padID'])) {
          $pid = $result['data']['padID'];
        }
      }
      else {
        // Create a public pad.
        $public_pid = uniqid('', TRUE);
        $result = etherpad_lite_client()->createPad('', $public_pid);
        if ($result['code'] == 0 && $result['message'] == 'ok') {
          $pid = $public_pid;
        }
      }

      $element['pid']['#value'] = $pid;
    }

    $element['pad'] = etherpad_lite_prepare_iframe($pid, array(), $access);
  }
  catch (Exception $e) {
    $message = t('Unable to connect to the etherpad service. Has it been <a href="/admin/config/services/etherpad-lite">configured</a>?');
    // Set the error in the messages section.
    form_set_error('pad', $message);
    // Add an element so the message also appears in context with the placement
    // in the form.
    $element['pad'] = array(
      '#markup' => '<div class="alert alert-block alert-danger messages error">' .
      $message .
      '</div>',
    );
  }
  return $element;
}

/**
 * Implements hook_field_is_empty().
 */
function etherpad_lite_field_is_empty($item, $field) {
  return empty($item['pid']);
}

/**
 * Implements hook_field_formatter_info().
 */
function etherpad_lite_field_formatter_info() {
  return array(
    'etherpad_iframe' => array(
      'label' => t('Etherpad: iFrame'),
      'field types' => array('etherpad'),
    ),
    'etherpad_iframe_readonly' => array(
      'label' => t('Etherpad: iFrame, Readonly'),
      'field types' => array('etherpad'),
    ),
  );
}

/**
 * Implements hook_field_formatter_info_alter().
 */
function etherpad_lite_field_formatter_info_alter(&$info) {
  if (isset($info['text_default'])) {
    $info['text_default']['field types'][] = 'etherpad';
  }
}

/**
 * Implements hook_field_formatter_view().
 */
function etherpad_lite_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $element = array();
  $settings = $display['settings'];

  $access = array(
    'field' => $field,
    'entity_type' => $entity_type,
    'entity' => $entity,
    'op' => 'view',
    'entity_op' => 'view',
  );

  switch ($display['type']) {
    case 'etherpad_iframe':
      foreach ($items as $key => $value) {
        $element[$key] = etherpad_lite_prepare_iframe($value['pid'], array(), $access);
      }
      break;

    case 'etherpad_iframe_readonly':
      foreach ($items as $key => $value) {
        $result = etherpad_lite_client()->getReadOnlyID($value['pid']);
        if (!empty($result['data']['readOnlyID'])) {
          $element[$key] = etherpad_lite_prepare_iframe($result['data']['readOnlyID'], array(), $access);
        }
      }
      break;
  }

  return $element;
}

/**
 * Authenticate and render a pad.
 *
 * @param string $pid
 *   Etherpad lite id.
 * @param array $options
 *   (optional) A set of options.
 *   - url: Etherpad lite url.
 * @param array $access
 *   (optional) Options for entity_access. Only required for group pads.
 *
 * @return array
 *   Renderable etherpad element.
 */
function etherpad_lite_prepare_iframe($pid, $options = array(), $access = array()) {
  global $user;
  $options += array(
    'url' => variable_get('etherpad_lite_url', 'http://localhost:9001'),
  );

  $denied = FALSE;
  $group = explode('$', $pid);
  // The pad is a group pad. Grant access to user.
  if (drupal_substr($group[0], 0, 1) == 'g') {
    $denied = TRUE;
    $gid = $group[0];
    $access += array(
      'enity_op' => 'update',
      'op' => 'edit',
      'entity' => NULL,
      'account' => NULL,
    );

    if (entity_access($access['enity_op'], $access['entity_type'], $access['entity'], $access['account']) && field_access($access['op'], $access['field'], $access['entity_type'], $access['entity'], $access['account'])) {
      // Update user.
      $result = etherpad_lite_client()->createAuthorIfNotExistsFor(format_username($user), $user->uid);
      if (!empty($result['data']['authorID'])) {
        $aid = $result['data']['authorID'];
      }

      // Grant current user.
      if (isset($gid) && isset($aid)) {
        $timeout = time() + variable_get('etherpad_lite_session_timeout', 60 * 60);
        $access = etherpad_lite_client()->createSession($timeout, $aid, $gid);
        if (!empty($access['data']['sessionID'])) {
          setcookie('sessionID', $access['data']['sessionID'], $timeout, '/', variable_get('etherpad_lite_cookie_domain'));
          $denied = FALSE;
        }
      }
    }
  }

  $element = array();
  if ($denied == FALSE) {
    $element = array(
      '#theme' => 'etherpad',
      '#value' => $pid,
      '#attributes' => array(
        'src' => url($options['url'] . '/p/' . $pid, array('external' => TRUE)),
        'class' => array(
          'etherpad',
        ),
      ),
    );
  }

  return $element;
}

/**
 * Implements hook_field_delete().
 *
 * Delete orphan pads.
 */
function etherpad_lite_field_delete($entity_type, $entity, $field, $instance, $langcode, &$items) {
  list($id, $vid, $bundle) = entity_extract_ids($entity_type, $entity);
  foreach ($items as $delta => $item) {
    $result = etherpad_lite_client()->deletePad($item['pid']);
  }
}

/**
 * Implements hook_element_info().
 */
function etherpad_lite_element_info() {
  $types['etherpad'] = array(
    '#theme' => 'etherpad_iframe',
    '#input' => FALSE,
    '#theme_wrappers' => array('form_element'),
  );
  return $types;
}

/**
 * Implements hook_theme().
 */
function etherpad_lite_theme($existing, $type, $theme, $path) {
  return array(
    'etherpad' => array(
      'render element' => 'element',
    ),
    'etherpad_iframe' => array(
      'render element' => 'element',
    ),
  );
}

/**
 * Etherpad lite embed code wrapper.
 */
function theme_etherpad(&$variables) {
  $element = $variables['element'];

  $element[0] = $element;
  $element[0]['#theme'] = 'etherpad_iframe';

  // This wrapper is required to apply CSS styling.
  $output = '';
  $output .= '<div class="etherpad-iframe">';
  $output .= drupal_render_children($element);
  $output .= '</div>';
  return $output;
}

/**
 * Etherpad lite embed codex.
 */
function theme_etherpad_iframe(&$variables) {
  $element = $variables['element'];
  $element['#theme'] = 'html_tag';
  $element['#tag'] = 'iframe';
  return drupal_render($element);
}

/**
 * Load a fully configured wsclient definition.
 *
 * @param bool $reset
 *   Whether to reset the static cache.
 *
 * @return WSClientServiceDescription
 *   Fully configured wsclient definition.
 */
function etherpad_lite_client($reset = FALSE) {
  static $service;
  if (!isset($service) || $reset) {
    $service = wsclient_service_load('etherpad_lite');
  }
  return $service;
}

/**
 * Implements hook_user_logout().
 */
function etherpad_lite_user_logout($account) {
  $result = etherpad_lite_client()->createAuthorIfNotExistsFor(format_username($account->name), $account->uid);
  if (!empty($result['data']['authorID'])) {
    $aid = $result['data']['authorID'];
    $sessions = etherpad_lite_client()->listSessionsOfAuthor($aid);
    if (!empty($sessions['data'])) {
      foreach ($sessions['data'] as $sid => $session) {
        etherpad_lite_client()->deleteSession($sid);
      }
    }
  }
}

/**
 * Implements hook_field_presave().
 */
function etherpad_lite_field_presave($entity_type, $entity, $field, $instance, $langcode, &$items) {
  if ($field['type'] == 'etherpad') {
    foreach ($items as $delta => $item) {
      if (isset($item['pid'])) {
        // Grap the last revision from etherpad lite.
        $rev = etherpad_lite_client()->getRevisionsCount($item['pid']);
        if (isset($rev['data']['revisions'])) {
          $text = etherpad_lite_client()->getText($rev['data']['revisions'], $item['pid']);
          if ($text['code'] == 0) {
            $items[$delta]['value'] = $text['data']['text'];
            $items[$delta]['format'] = filter_fallback_format();
          }
        }
      }
    }
  }
}

/**
 * Implements hook_form_field_ui_field_edit_form_alter().
 */
function etherpad_lite_form_field_ui_field_edit_form_alter(&$form, $form_state) {
  unset($form['instance']['default_value_widget'][$form['#instance']['field_name']]);
}
